# -*- coding: utf-8 -*-
"""tfc_21_word2vec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17uBVyLKMxZ2XWu9TdcHmtxqhj0XuGe4k
"""

# daum 페이지의 뉴스 기사를 읽어 형태소 분석 후 word2vec을 이용해 단어 간 유사도 확인
!pip install konlpy
from konlpy.tag import Okt
import pandas as pd

okt = Okt()  # Okt 객체 초기화

with open('news.txt', mode='r') as obj:
  lines = obj.read().split('\n')

print(lines)

# 명사만 추출해서 단어 빈도 수를 확인
wordDic = {}

for line in lines:
  datas = okt.pos(line) # 품사 태깅
  # print(datas)
  for word in datas:
    if word[1] == 'Noun':
      # print(word[0])
      if len(word[0])>=2:
        if not(word[0] in wordDic):
          wordDic[word[0]] = 1
        wordDic[word[0]] +=1
print(wordDic)

keys = sorted(wordDic.items(), key=lambda x:x[1], reverse=True)
print(keys)

# keys 자료를 DataFrame에 담기
wordList = []
countList = []
for word, count in keys[:20]:
  wordList.append(word)
  countList.append(count)

df = pd.DataFrame()
df['word'] = wordList
df['count'] = countList
print(df.head(3))
# pandas의 기능으로 기술통계 작업처리 ...

# 단어 간 유사도 구하기
results = [] # 한글만 기억

with open('news.txt', mode='r') as obj:
  lines = obj.read().split('\n')

  for line in lines:
    datas = okt.pos(line, stem=True) # 원형 어근으로 출력 ex)한가한:한가하다
    # print(datas)
    imsi = []
    for word in datas:
      if not word[1] in ['Number','Josa','Punctuation','Alpha','Modifier','Foreign','Suffix']:
        if len(word[0]) >=2:
          imsi.append(word[0])
    imsi2 = (' '.join(imsi)).strip()
    results.append(imsi2)

print(results)

fileName = 'daumnews.txt'
with open(fileName, mode='w') as obj:
  obj.write('\n'.join(results))

from gensim.models import word2vec

lineObj = word2vec.LineSentence(fileName)

model = word2vec.Word2Vec(sentences=lineObj, vector_size=100, window=10, min_count=1, sg=1)
# sg=0 : CBOW(주변단어로 중심단어를 예측), sg=1 : Skip-Gram(중심단어로 주변단어를 예측)
print(model)

# model.init_slms(replace=True) # 필요없는 메모리 해제

# positive : 단어 사전에 해당 단어가 있을 확률, 가까운 단어를 찾음
# negative : 단어 사전에 해당 단어가 없을 확률, 먼 단어를 찾음
print(model.wv.most_similar(positive=['수출'])) # 긍정적 기여 목록
print(model.wv.most_similar(negative=['수출'])) # 부정적 기여 목록
print(model.wv.most_similar(positive=['수출'],topn=5)) # 5개만 보이게
print(model.wv.most_similar(positive=['수출','전자'],topn=5))