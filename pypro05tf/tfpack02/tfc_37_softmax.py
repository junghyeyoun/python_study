# -*- coding: utf-8 -*-
"""tfc_37_softmax.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OQvOih5iN44frvpcMp8ZD7q2pvYZ4fDO
"""

# 로이터 뉴스 데이터로 다항분류 : 레이블이 46개의 범주로 구성
import numpy as np
from keras.datasets import reuters
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout, Embedding

(x_train, y_train), (x_test, y_test) = reuters.load_data(test_split=0.3, num_words=1000)
print(x_train.shape, y_train.shape, x_test.shape,y_test.shape)
print(x_train[:1])
print(y_train[:1]) # 범주
category = np.max(y_train) + 1
print('category : ',category)

word_index = reuters.get_word_index()
print(word_index)

index_to_word = {}
for k, v in word_index.items():
  index_to_word[v] = k
print(index_to_word)
print(index_to_word[1]) # the가 현재 corpus에서 가장 많이 등장하는 단어
print(index_to_word[123])
print(' '.join(index_to_word[i] for i in x_train[0]))

# 시각화
import matplotlib.pyplot as plt

plt.hist([len(i) for i in x_train], bins=30)
plt.xlabel('length')
plt.ylabel('number')
plt.show()

# feature 데이터의 크기를 통일
from keras.preprocessing import sequence
x_train = sequence.pad_sequences(x_train, maxlen=100)
x_test = sequence.pad_sequences(x_train, maxlen=100)
print(x_train[:1])

# model
model = Sequential()
model.add(Embedding(1000, 100)) # 특정차원(100)으로 입력 벡터를 주입 후 학습을 통해 가중치(기울기)를 조정해 나가는 방식. 단어 사이의 관계가 반영되지는 않는다.
model.add(LSTM(128,activation='tanh'))
model.add(Dense(46,activation='softmax'))
print(model.summary())

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy']) # 레이블을 원핫처리 안해서 sparse_categorical_crossentropy 사용

history = model.fit(x_train, y_train, batch_size=64, epochs=30, validation_split=0.2, verbose=2)

# 시각화
vloss = history.history['val_loss']
loss = history.history['loss']
epoch = np.arange(len(loss))
plt.plot(epoch, vloss, marker='.', c='red', label='val_loss')
plt.plot(epoch, loss, marker='s', c='blue', label='loss')
plt.legend()
plt.grid()
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()
# 30번은 과적합 -> 10번에서 12번 하는게 좋겠다.

